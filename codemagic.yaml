# Check out https://docs.codemagic.io/yaml/building-a-react-native-app/ for more information
# Please review and update values

workflows:
    react-native-android:
        name: React Native Android
        triggering:
          events:
            - push
            - pull_request
          branch_patterns:
            - pattern: 'test'
              include: true
              source: true  
        max_build_duration: 120
        instance_type: mac_mini_m1
        environment:
          android_signing:
            - keystore_reference
          groups:            
            - google_credentials # <-- (Includes GCLOUD_SERVICE_ACCOUNT_CREDENTIALS)
          vars:
            PACKAGE_NAME: "com.zadanetwork.wallet"
          node: v19.7.0
        scripts:
            # - name: Install npm dependencies
            #   script: |
            #     npm install --prefix ./covidWallet --legacy-peer-deps
            - name: Set Android SDK location
              script: |
                echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/covidWallet/android/local.properties"
            - name: Build Android release
              script: |
                # Fetch OAuth 2.0 token (Replace this with actual token retrieval method)
                ACCESS_TOKEN=$GCLOUD_SERVICE_ACCOUNT_CREDENTIALS

                # Get production track version
                PRODUCTION_VERSION_INFO=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
                                                "https://play.googleapis.com/v3/applications/$PACKAGE_NAME/edits/track/production")
                PRODUCTION_VERSION_NAME=$(echo "$PRODUCTION_VERSION_INFO" | jq -r '.versionName')
                
                # Get internal track version
                INTERNAL_VERSION_INFO=$(curl -s -H "Authorization: Bearer $ACCESS_TOKEN" \
                                                "https://play.googleapis.com/v3/applications/$PACKAGE_NAME/edits/track/internal")
                INTERNAL_VERSION_NAME=$(echo "$INTERNAL_VERSION_INFO" | jq -r '.versionName')

                # # Get the latest build numbers and version names from Google Play
                # LATEST_PRODUCTION_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --track "production")
                # LATEST_INTERNAL_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --track "internal")
                
                # # Fetch latest version name from Google Play
                # APP_INFO_PRODUCTION=$(google-play-cli app-info --package-name "$PACKAGE_NAME" --track "production")
                # VERSION_NAME_PRODUCTION=$(echo "$APP_INFO_PRODUCTION" | grep "versionName" | awk '{print $2}')

                # APP_INFO_INTERNAL=$(google-play-cli app-info --package-name "$PACKAGE_NAME" --track "internal")
                # VERSION_NAME_INTERNAL=$(echo "$APP_INFO_INTERNAL" | grep "versionName" | awk '{print $2}')

                # # Output the current version names
                # echo "Production Version Name: $VERSION_NAME_PRODUCTION"
                # echo "Internal Version Name: $VERSION_NAME_INTERNAL"

                # # Compare versions
                # IFS='.' read -r P_MAJOR P_MINOR P_PATCH <<< "$VERSION_NAME_PRODUCTION"
                # IFS='.' read -r I_MAJOR I_MINOR I_PATCH <<< "$VERSION_NAME_INTERNAL"

                # if [ "$P_MAJOR" -eq "$I_MAJOR" ] && [ "$P_MINOR" -eq "$I_MINOR" ] && [ "$P_PATCH" -eq "$I_PATCH" ]; then
                #   # Increment patch version and build number
                #   NEW_PATCH=$(($P_PATCH + 1))
                #   NEW_BUILD_NUMBER=$(($LATEST_INTERNAL_BUILD_NUMBER + 1))

                #   # Handle patch version exceeding 50
                #   if [ "$NEW_PATCH" -gt 50 ]; then
                #     NEW_PATCH=0
                #     NEW_MINOR=$(($I_MINOR + 1))
                #     # Handle minor version exceeding 50
                #     if [ "$NEW_MINOR" -gt 50 ]; then
                #       NEW_MINOR=0
                #       NEW_MAJOR=$(($I_MAJOR + 1))
                #     else
                #       NEW_MAJOR=$I_MAJOR
                #     fi
                #   else
                #     NEW_MINOR=$I_MINOR
                #     NEW_MAJOR=$I_MAJOR
                #   fi

                #   NEW_VERSION_NAME="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
                # else
                #   # Only increment build number
                #   NEW_VERSION_NAME="$I_MAJOR.$I_MINOR.$I_PATCH"
                #   NEW_BUILD_NUMBER=$(($LATEST_INTERNAL_BUILD_NUMBER + 1))
                # fi

                # # Output the new version name
                # echo "New Version Name: $NEW_VERSION_NAME"
                # echo "New Build Number: $NEW_BUILD_NUMBER"

                # # Build the release
                # cd covidWallet/android
                # ./gradlew bundleRelease \
                #   -PversionCode=$NEW_BUILD_NUMBER \
                #   -PversionName=$NEW_VERSION_NAME
        # artifacts:
        #     - covidWallet/android/app/build/outputs/**/*.aab
        # publishing:
        #   email:
        #     recipients:
        #       - devs@zada.io              
        #     notify:
        #       success: true     # To not receive a notification when a build succeeds
        #       failure: true    # To not receive a notification when a build fails
        #   google_play:
        #     credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
        #     track: internal   # Any default or custom track that is not in ‘draft’ status
        #     # submit_as_draft: true